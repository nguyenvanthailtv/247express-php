@use "sass:math";

$grid-columns: 12;


$breakpoints:(
    "xs":0px,
    "sm":480px,
    "md":720px,
    "lg":960px,
    "xl":1200px,
    "xxl":1320px,
);

$grid-gaps:(
    "0":0px,
    "1":10px,
    "2":20px,
    "3":30px,
    "4":40px

);

$layout-values: flex-start,flex-end,center, space-between, space-around;

@mixin xs {
    @media (min-width: calc(map-get($breakpoints,"xs") + 1px)) and (max-width:map-get($breakpoints,"sm")){
        @content;
    }
}

@mixin sm {
    @media (min-width: calc(map-get($breakpoints,"sm") + 1px)) and (max-width:map-get($breakpoints,"md")){
        @content;
    }
}

@mixin md {
    @media (min-width: calc(map-get($breakpoints,"md") + 1px))and (max-width:map-get($breakpoints,"lg")){
        @content;
    }
}

@mixin lg {
    @media (min-width: calc(map-get($breakpoints,"lg") + 1px)) and (max-width:map-get($breakpoints,"xl")){
        @content;
    }
}

@mixin xl {
    @media (min-width: calc(map-get($breakpoints,"xl") + 1px)) and (max-width:map-get($breakpoints,"xxl")){
        @content;
    }
}

@mixin xxl {
    @media (min-width: map-get($breakpoints,"xxl")){
        @content;
    }
}

// base layout classes
.container{
    width: 100%;
    max-width: 1320px;
    margin: 0 auto;
    padding: 0 20px;
    box-sizing: border-box;
}

.row{
    display: flex;
    flex-flow: row wrap;
}

// grid gaps
@each $key, $val in $grid-gaps{
    .gap-#{$key} > *{
        padding:0 $val;
    }

    .gap-#{$key}{
        margin-left: -$val;
        margin-right:  -$val;
    }
}


// justify content classes
@each $val in $layout-values {
    .justify-#{$val}{
        justify-content: $val;
    }
}


// col classes

@include xs{
    @for $i from 1 through $grid-columns{
        .col-#{$i}-xs {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include sm{
    @for $i from 1 through $grid-columns{
        .col-#{$i}-sm {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include md{
    @for $i from 1 through $grid-columns{
        .col-#{$i}-md{
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include lg{
    @for $i from 1 through $grid-columns{
        .col-#{$i}-lg{
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include xl{
    @for $i from 1 through $grid-columns{
        .col-#{$i}-xl{
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include xxl{
    @for $i from 1 through $grid-columns{
        .col-#{$i}-xxl{
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

// col classes null

@include xs{
    @for $i from 1 through $grid-columns{
        .col-#{$i}-o-xs {
            box-sizing: border-box;
            flex-grow: 0;
            margin-left: math.div($i * 100%, $grid-columns);
        }
    }
}

@include sm{
    @for $i from 1 through $grid-columns{
        .col-#{$i}-o-sm {
            box-sizing: border-box;
            flex-grow: 0;
            margin-left: math.div($i * 100%, $grid-columns);
        }
    }
}

@include md{
    @for $i from 1 through $grid-columns{
        .col-#{$i}-o-md{
            box-sizing: border-box;
            flex-grow: 0;
            margin-left: math.div($i * 100%, $grid-columns);
        }
    }
}

@include lg{
    @for $i from 1 through $grid-columns{
        .col-#{$i}-o-lg{
            box-sizing: border-box;
            flex-grow: 0;
            margin-left: math.div($i * 100%, $grid-columns);
        }
    }
}

@include xl{
    @for $i from 1 through $grid-columns{
        .col-#{$i}-o-xl{
            box-sizing: border-box;
            flex-grow: 0;
            margin-left: math.div($i * 100%, $grid-columns);
        }
    }
}
@include xxl{
    @for $i from 1 through $grid-columns{
        .col-#{$i}-o-xxl{
            box-sizing: border-box;
            flex-grow: 0;
            margin-left: math.div($i * 100%, $grid-columns);
        }
    }
}



